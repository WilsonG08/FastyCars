src\controllers\authenticationController.js

import User from '../models/pasajeroDB.js'; // Importa el modelo de usuario


// Función para manejar la solicitud de autenticación
const login = async (req, res) => {
  try {
    // Aquí puedes implementar la lógica de autenticación, como la comprobación de credenciales.
    // Por ejemplo, verificar si el correo y la contraseña coinciden con un usuario en la base de datos.
    // Si la autenticación es exitosa, puedes generar un token de autenticación y responder con él.
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Error en la autenticación' });
  }
};

// Función para manejar la solicitud de verificación
const verify = async (req, res) => {
  try {
    // Aquí puedes implementar la lógica de verificación del código, utilizando el modelo de usuario y la información proporcionada en la solicitud.
    // Verificar si el código proporcionado coincide con el código almacenado en la base de datos para el usuario correspondiente.
    // Si la verificación es exitosa, actualiza el estado de confirmación del teléfono del usuario.

    // Puedes utilizar el modelo de usuario y sus métodos definidos anteriormente para realizar estas operaciones.
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Error en la verificación' });
  }
};

export { login, verify };


============================================================================================================================================================
============================================================================================================================================================

src\controllers\registerController.js

import Pasajero from '../models/pasajeroDB.js';

// Función para registrar un pasajero en la base de datos
const registerPasajero = async (req, res) => {
    try {
        const { name, lastName, email, password, phone } = req.body;

        // Verificar que el número de teléfono se haya confirmado antes de registrar
        const pasajero = await Pasajero.findOne({ phone, confirmPhone: true });

        if (!pasajero) {
            return res.status(400).json({ message: "Debe confirmar su número de teléfono primero." });
        }

        // Crear un nuevo pasajero en la base de datos
        const newPasajero = new Pasajero({ name, lastName, email, password, phone });
        
        // Cifrar la contraseña antes de guardarla
        newPasajero.password = await newPasajero.encrypPassword(password);

        // Guardar el pasajero en la base de datos
        await newPasajero.save();

        res.status(200).json({ message: "Pasajero registrado con éxito." });
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Error al registrar al pasajero." });
    }
};

export { registerPasajero };

============================================================================================================================================================
============================================================================================================================================================


src\controllers\registrationController copy.js

import User from '../models/pasajeroDB.js'; // Importa el modelo de usuario

// Función para manejar la solicitud de registro de usuarios
const register = async (req, res) => {
    try {
        const { name, lastName, email, password, phone } = req.body;

        // Aquí puedes implementar la lógica de registro de usuarios.
        // Por ejemplo, puedes crear un nuevo documento de usuario utilizando el modelo de usuario
        // y guardar los datos en la base de datos.

        const newUser = new User({
            name,
            lastName,
            email,
            password,
            phone,
        });

        // Asegúrate de cifrar la contraseña antes de guardarla en la base de datos, si es necesario.
        newUser.password = await newUser.encrypPassword(password);

        // Puedes realizar otras operaciones, como generar un token de autenticación si es necesario.

        await newUser.save(); // Guarda el nuevo usuario en la base de datos

        res.status(201).json({ message: 'Usuario registrado con éxito' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Error en el registro de usuario' });
    }
};

export { register };


============================================================================================================================================================
============================================================================================================================================================


src\routers\registrationRouter.js

import express from 'express';
//import { verify } from '../controllers/authenticationController.js'; // Importa la función de verificación desde el controlador

const router = express.Router();

// Ruta para verificar el código
router.get('/verify', verify);

export default router;


============================================================================================================================================================
============================================================================================================================================================


src\routers\login.js


import express from 'express';
//import { login } from '../controllers/authenticationController.js'; // Importa la función de autenticación desde el controlador

const router = express.Router();

// Ruta para la autenticación (login)
router.get('/login', login);

export default router;


============================================================================================================================================================
============================================================================================================================================================
